library(prophet)
library(data.table)
library(dplyr)
library(ggplot2)

# Stationarity test
library(tseries)
adf.test(aggr_train$y,k=12)
kpss.test(aggr_train$y)

# read data
train = fread("Train_V3.csv")

# Extract date from the Datetime variable
train$Date = as.POSIXct(strptime(train$Sales_date, "%d-%m-%Y"))

# Convert 'Datetime' variable from character to date-time format
train$Date1 = as.POSIXct(strptime(train$Sales_date, "%d-%m-%Y %H:%M"))

# view 
head(train)

# Aggregate train data day-wise
aggr_train = train[,c('Date','Qty')]

# Visualize the data
ggplot(aggr_train) + geom_line(aes(Date, Qty))

# Change column names
names(aggr_train) = c("ds", "y")

# Model building
holidays<-fread("Festival_Dates_updated.csv")
m = prophet(aggr_train,holidays = holidays,growth = 'linear',fit=TRUE,yearly.seasonality = TRUE,
            weekly.seasonality = TRUE)
future = make_future_dataframe(m, periods = 61,freq = "day")
tail(future)
forecast = predict(m, future)

# Visualize forecast
plot(m, forecast)
write.csv(data.frame(forecast$ds,forecast$yhat),"forecast_prophet.csv")

#arima
  
# loading packages
library(forecast)
library(Metrics)

# removing "Month" column
aggr_train$ds = NULL

# training model
model = auto.arima(aggr_train,seasonal = TRUE)

# model summary
summary(model)

# forecasting
forecast = predict(model,n.ahead = 60)
write.csv(forecast,"forecast_arima.csv")


#####  SES
# Convert the data to be officially "time-series" data
model1<-ses(aggr_train$y, h=60, alpha=0.4, initial="simple",level=99)
forecast(model1)
length(model1)

